syntax = "proto3";

package gRPCBroker;

/*
 * Messages
 */

// Event
message PostEventRequest {
    EventOutput eventOutput = 1;
}
message PostEventReply {
    ErrorCodeType errorCode = 1;
}
message EventOutput {
    string key = 1;
}

// Data
message UpdateDataRequest {
    DataOutput dataOutput = 1;
}
message UpdateDataReply {
    ErrorCodeType errorCode = 1;
}
message DataOutput {
    string key = 1;
    DataType dataType = 2;
    string value = 3;
}

message GetDataStreamRequest {

}
message GetDataStreamReply {
    DataInput dataInput = 1;
}
message DataInput {
    string key = 1;
}

// Notification
message PushNotificationStreamRequest {

}
message PushNotificationStreamReply {
    NotificationInput notificationInput = 1;
}
message NotificationInput {
    string key = 1;
}

// Configuration
message DeclareConfigurationRequest {
    string id = 1;
    Configuration configuration = 2;
}
message DeclareConfigurationReply {
    ErrorCodeType errorCode = 1;
}

message SetConfigurationStreamRequest {
    
}
message SetConfigurationStreamReply {
    Configuration configuration = 1;
}

message Configuration {
    repeated DataConfiguration dataConfiguration = 1;
    repeated EventConfiguration eventConfiguration = 2;
    repeated ParameterConfiguration parameterConfiguration = 3;
}

message DataConfiguration {
    string key = 1;
    int32 interval = 2;
    DataUpdateModeType dataUpdateMode = 3;
    DataType dataType = 4;
}
enum DataUpdateModeType {
    AUTO = 0;
    ASK = 1;
    INTERVAL = 2;
}

message EventConfiguration {
    EventStatusType eventStatus = 1;
    string key = 2;
}
enum EventStatusType {
    DISABLE = 0;
    ENABLE = 1;
}

message ParameterConfiguration {
    string key = 1;
    string value = 2;
    DataType dataType = 3;
}

/*
 * Error
 */

enum ErrorCodeType {
    SUCCESS = 0;
    FAILURE = 1;
}

/*
 * Common
 */

 enum DataType {
     NUMBER = 0;
     STRING = 1;
     BOOLEAN = 2;
     JSON = 3;
 }

service gRPCBroker {
    rpc PostEvent(PostEventRequest) returns (PostEventReply) {};
    rpc UpdateData(UpdateDataRequest) returns (UpdateDataReply) {};
    rpc PushNotificationStream(PushNotificationStreamRequest) returns (stream PushNotificationStreamReply) {};
    rpc GetDataStream(GetDataStreamRequest) returns (stream GetDataStreamReply) {};
    rpc DeclareConfiguration(DeclareConfigurationRequest) returns (DeclareConfigurationReply) {};
    rpc SetConfiguration(SetConfigurationStreamRequest) returns (stream SetConfigurationStreamReply) {};
}